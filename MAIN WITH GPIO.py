# -*- coding: utf-8 -*-
"""PROJECT1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1nOS7vAzJ4jQC2Ebq0ULfp4LCCPHDFsrp
"""


import cv2
from collections import defaultdict
from PIL import Image
from datetime import datetime
from easyocr import Reader
import re
import Jetson.GPIO as GPIO
import time 


def cleanup_text(text):
    # strip out non-ASCII text so we can draw the text on the image
    # using OpenCV
    return "".join([c if ord(c) < 128 else "" for c in text]).strip()

#LED PIN 
led_pin = 5 #TO BE EDIT accordingly (green)
led_pin2 = 7 #RED
GPIO.setmode(GPIO.BOARD) 
GPIO.setup(led_pin, GPIO.OUT, initial=GPIO.LOW)
GPIO.setup(led_pin2, GPIO.OUT, initial=GPIO.LOW)

# Open the camera
cap = cv2.VideoCapture(0)

found = False
final_frame = None

reader = Reader(["en", "ar"], gpu=True)

while (True):

    # Capture the video frame
    # by frame
    ret, img_org = cap.read()
    cv2.imshow('frame', img_org)

    results = reader.readtext(img_org)
    # print(results)

    tot_results = len(results)
    for i in range(tot_results):
        # unpack the bounding box
        bbox = results[i][0]
        text = results[i][1]
        (tl, tr, br, bl) = bbox
        tl = (int(tl[0]), int(tl[1]))
        tr = (int(tr[0]), int(tr[1]))
        br = (int(br[0]), int(br[1]))
        bl = (int(bl[0]), int(bl[1]))

        # cleanup the text and draw the box surrounding the text along
        # with the OCR'd text itself
        text = cleanup_text(text)

        # print(d['text'][i])
        if 'update' in text.lower():
            try:

                time = ' '.join([x[1] for x in results][i:i + 3])

                # print(time)
                match = re.search(r'\d{2}.*\d{2}:\d{2}', time)

                format = "%d %b, %H:%M"
                # print(match)
                dt = datetime.strptime(match.group(), format)
                dt = dt.replace(year=datetime.now().year)
            except:
                continue
            final_frame = img_org
            cv2.imwrite('camera_new.jpg', img_org)
            # print('camera_new made!')
            found = True

            difference = (datetime.now() - dt).total_seconds() / 60.0

            # we can set the time limit in minutes here
            max_minute = 10
            if difference > max_minute:
                print("Difference is", difference, "minutes, Max difference allowed is", max_minute, "minutes")
                print("PERMISSION DENIED")
                im = Image.open(r'red_x.png')
                GPIO.output(led_pin2, GPIO.HIGH)
                im.show()
                time.sleep(2) 
                GPIO.output(led_pin2, GPIO.LOW)
                exit(-1)

            # Color Check

            # recalibrating to cater for resizing image in start
            tl = (int(tl[0]) - 5, int(tl[1]) - 15)
            br = (int(br[0]) - 15, int(br[1]) - 15)

            im = Image.open('camera_new.jpg')
            im = im.crop((tl[0], tl[1], br[0], br[1]))

            by_color = defaultdict(int)
            for pixel in im.getdata():
                by_color[pixel] += 1

            # print(by_color)
            # print(max(by_color, key=by_color.get))
            max_val = max(by_color, key=by_color.get)

            if max_val[1] > max_val[0] and max_val[1] > max_val[2]:
                print("OPEN DOOR")
                im = Image.open(r'checkmark_green.jpg')
                GPIO.output(led_pin, GPIO.HIGH)
                im.show()
                time.sleep(2) 
                GPIO.output(led_pin, GPIO.LOW)
            else:
                print("PERMISSION DENIED")
                im = Image.open(r'red_x.png')
                GPIO.output(led_pin2, GPIO.HIGH)
                im.show()
                time.sleep(2) 
                GPIO.output(led_pin2, GPIO.LOW)
                

    # the 'q' button is set as the
    # quitting button you may use any
    # desired button of your choice
    if cv2.waitKey(1) & 0xFF == ord('q') or found:
        break

cap.release()

# close all the opened windows
cv2.destroyAllWindows()
